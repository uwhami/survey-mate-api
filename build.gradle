buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.surveymate'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

//tasks.withType(JavaCompile) {
//	options.compilerArgs << "-parameters"
//}

configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Log4j2 설정
	implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1' // SLF4J 구현체

	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'


	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.11.0'

//	https://mapstruct.org/documentation/installation/
	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	implementation 'org.mapstruct:mapstruct:1.6.2'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'

	implementation group: 'net.coobird', name: 'thumbnailator', version: '0.4.8'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'


	// QueryDSL
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// 로그인 후 api 호출 시마다 uuid와 매칭된 memnum을 GuavaCache를 통해서 가지고 오도록 설정.
	implementation group: 'com.google.guava', name: 'guava', version: '33.3.1-jre'

	// 로그에 sql 실행 시 ? 가 아니라 파라미터로 바로 나오도록 설정.
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'com.google.api-client:google-api-client-jackson2:1.20.0'
	implementation 'com.google.api-client:google-api-client:2.7.1'
	implementation 'com.google.oauth-client:google-oauth-client:1.34.1'
	implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'

	implementation 'org.springframework.boot:spring-boot-starter-webflux'




}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile
sourceSets {
	main {
		java {
			srcDirs += querydslDir
		}
	}
}



clean {
	delete file(querydslDir)
}
